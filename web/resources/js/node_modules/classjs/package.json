{
  "name": "classjs",
  "description": "Simple Class System for JavaScript",
  "version": "0.8.0",
  "author": {
    "name": "Tino Butz",
    "email": "tinobutz@gmail.com"
  },
  "url": "https://github.com/tjbutz/class.js",
  "keywords": [
    "util",
    "server",
    "client",
    "browser",
    "class",
    "inheritance",
    "backbone"
  ],
  "contributors": [],
  "dependencies": {
    "underscore": ">=1.3.1"
  },
  "devDependencies": {
    "qunit": "*"
  },
  "lib": ".",
  "repository": {
    "type": "git",
    "url": "https://github.com/tjbutz/class.js.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tjbutz/class.js/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/tjbutz/class.js/issues"
  },
  "main": "class.js",
  "readme": "class.js\n========\n\nSimple (2KB minified & gzipped & all features) class system for JavaScript. Designed to work with backbone.js and node.js.\n\n## Features\n  * Core:\n    * Inheritance \n    * ```__super__``` - reference to super class\n  * Plugins:\n    * Mixins\n    * Interfaces\n    * Singleton\n    * Namespaces\n    * Properties\n      * getter / setter (Optional:Support for ECMA5 getter / setter)\n      * visibility\n      * type check (Class, Object, String, Number, Boolean, Function, Array, Element, Regex, Date, more can be added)\n      * format value\n      * validation\n      * init value,\n      * nullable\n      * events (optional, event emitter needed: e.g. Backbone.Events, node.js events.EventEmitter)\n  * Extensible: Add your own definition keys and types\n  * Browser & commonJS support\n  * Well tested\n\n## Dependencies\n\n  * http://underscorejs.org\n\n## Installation\n\nBrowser:\n\n```html\n<script src=\"underscore.js\"></script>\n<script src=\"class.js\"></script>\n```\n\nnode.js:\n\n```\nnpm install classjs\n```\n\n```js\nrequire(\"classjs\");\n```\n\n## Example\n\n\n```js\nvar Class = require('classjs');\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar ICompany = {\n  addEmploye : function(employe) {\n    // Check passed arguments\n    if (Array.prototype.slice.call(arguments).length != 1) {\n      throw new Error(\"Wrong length of arguments\");\n    }\n    if (typeof employe !== \"object\") {\n      throw new Error(\"Wrong type for argument employe\");\n    }\n  }\n};\n\n// Define a new class. Extend from EventEmitter.\nvar Company = Class.define(EventEmitter, {\n  interfaces : [ICompany],\n  properties : {\n    activated : \"Boolean\",\n    name : {\n      type : \"String\",\n      init : \"No Name\",\n      validate : function(value, old, prop) {\n        return value != \"foo\"; // alternative you can return a custom error message as a string\n      },\n      apply : \"_applyName\",\n      event : \"nameChanged\"\n    },\n    street : {\n      type : \"String\",\n      format : function(value, old, prop) {\n        return value.toUpperCase()  \n      },\n      get : false, // generate only private getter / setter\n      set : false\n    },\n    city : {\n      type : \"String\",\n      nullable : true\n    }\n  },\n\n  members : {\n    _applyName : function(value, old, prop) {\n      console.log(\"Apply name method called with value: %s | old value: %s | property: %s\", value, old, prop);\n    },\n    \n    addEmploye : function(employe) {\n      console.log(\"Base method 'addEmploye' called: \", employe);\n    }\n  }\n});\n\n// Extend from \"Company\"\nvar MyCompany = Company.extend({\n  namespace : \"my.cool.Company\",\n\n  constructor : function() {\n    this.__super__.apply(this, arguments);\n    this.setName(\"My Company\"); \n    this._setStreet(\"Some Street\", false);\n    this.setCity(null);\n  },\n  \n  \n  members : {\n    addEmploye : function(employe) {\n      // Call overridden method\n      this.__super__.addEmploye.apply(this, arguments);\n      console.log(\"Overridden method 'addEmploye' called: \", employe);\n    }\n  }\n  \n});\n\nvar company = new MyCompany();\ncompany.on(\"nameChanged\", function(data) {\n  console.log(\"Name changed to %s\", data.value);\n});\ncompany.addEmploye({name:\"Lena\"});\ncompany.setName(\"My new Company\");\n```\n\n## Tests & Custom Builds\n\nclass.js is using grunt (https://github.com/cowboy/grunt) to build the modules and to run the tests.\nIf you would like to create a custom build of class.js or develop a feature, please follow these steps:\n\nTo install Grunt run the follwing command (npm (http://npmjs.org/) needed):\n \n```\nnpm install -g grunt\n```\n\nTest & Build the project, run:\n```\ngrunt\n```\n\nAutomatically build project whenever a lib/*.js file is changed:\n```\ngrunt watch\n```\n\nRun tests only:\n```\ngrunt qunit\n```\n\nThe tests are located in the ```test``` folder. With the index*.html files you can run the tests manually in any browser you want.\n\n## API\n\n```js\nClass.define(name, superClass, definition)\n```\n\n  * name: The name of the class (optional)\n  * superClass: Class (optional)\n  * definition: Object (optional)\n\nDefines a new class.\n\n```js\n\nClass.define(name, superClass, {\n  namespace : String,\n\n  singleton : true|false,\n\n  mixins : [Object|Class],\n\n  interfaces : [Object|Class],\n  \n  constructor : Function, // Optional. Super constructor is called implicit when not available\n\n  properties : {\n    prop1 : \"Number|Boolean|String|Object|Function|Array|Element|Regex\" | Class, // Simple property definition\n    prop2 : {\n                type : \"Number|Boolean|String|Object|Function|Array|Element|Regex|Date\" | Class, // Complex property definition\n                init : Mixed\n                format : \"Function\" | Function,\n                validate : \"Function\" | Function | [\"Function\"|Function],\n                apply : \"Function\" | Function,\n                set : true|false,\n                get : true|false,\n                nullable : true|false,\n                event : String\n            }\n    ... \n  },\n  \n\n\n  statics : {\n    static1 : Function,\n    static2 : Function,\n    ...\n  },\n  \n  members : {\n    member1 : Function\n    member2 : Function\n    ...\n  }\n});\n```\n\n________________________________________________________________________________________________________________________\n\n```js\nSomeClass.extend(name, definition)\n```\n\n  * name: The name of the class (optional)\n  * definition: Object (optional) (see Class.extend for more details)\n\nThe ```extend``` method is added automatically to every created Class. Extends from the given class.\n\n```js\n\n  var MyClass = Class.define();\n  var SomeClass = MyClass.extend();\n  var obj = new SomeClass();\n\n```\n\n## Advanced\n\nSometimes it can be usefull not to use the full feature set of class.js. You can use the methods that are used for the class definitions standalone as well:\n\n```js\nClass.singleton(clazz, setSingleton)\nClass.mixins(clazz, mixins)\nClass.interfaces(clazz, interfaces)\nClass.properties(clazz, properties)\nClass.statics(clazz, statics)\nClass.members(clazz, members)\nClass.namespace(namespace, clazz)\n```   \n________________________________________________________________________________________________________________________\n\nExtending types\n\n```js\nClass.types (provided by properties plugin)\n```\n\nFor example:\n\n```js\nClass.types[\"MyType\"] = function(value) {\n  return value instanceof MyType;\n}\n```\n________________________________________________________________________________________________________________________\n\nExtending definition\n\n```js\nClass.definition\n```\n\nFor example:\n\n```js\nClass.definition.push(\"mykey\");\nClass.mykey = function(clazz, definition) {\n  for (var key in definition) {\n    clazz.prototype[key] = function() {\n      alert(\"My New Extension\");\n    }\n  }\n}\n```\n________________________________________________________________________________________________________________________\n\nClass define hooks\n\n```js\nClass.onBeforeClassDefine\nClass.onAfterClassDefine \n```\n\nFor example:\n\n```js\nClass.onBeforeClassDefine = function() {\n  console.log(\"Before Class Define called\");\n };\n\nClass.onAfterClassDefine = function() {\n  console.log(\"After Class Define called\");\n};\n```\n\nBefore instantiation hooks\n\n```js\nClass.onBeforeInstantiation\nClass.onAfterInstantiation \n```\n\n________________________________________________________________________________________________________________________\n\nFor example:\n\n```js\nClass.onBeforeInstantiation = function() {\n  console.log(\"Before object is instantiated\");\n};\n\nClass.onAfterInstantiation = function() {\n  console.log(\"After object is instantiated\");\n};\n```\n\n________________________________________________________________________________________________________________________\n\nECMA5 Getter / Setter\n\nWhen ECMA5 Mode is activated instead of setProp / getProp methods, ECMA5 getter and setter are generated. This can be used\nlike normal JavaScript properties, but will check for types / validate / format / etc.\n\n```js\nClass.ECMA5;\n```\n\nFor example:\n\n```js\nClass.ECMA5 = true;\n\nvar MyClass = Class.define({\n  properties : {\n    foo : \"Boolean\"\n    bar : \"Number\"      \n  }\n});\n\n\nvar obj = new MyClass();\nobj.bar = 1 // no setBar(1) needed\nvar bar = obj.bar; // no getBar() needed\nobj.foo = \"string\" // will throw an exception\n```\n________________________________________________________________________________________________________________________\n\nError Types\n\n```js\nClass.ValidationError\nClass.TypeError // extends from validation error\n```\n\nIn your error handler you can check for the type:\n\n```js\n    if (error instanceof Class.TypeError) {\n      console.log(error.message);\n      console.log(error.type);\n      console.log(error.value);\n      console.log(error.property);\n    }\n\n    if (error instanceof Class.ValidationError) {\n      console.log(error.message);\n      console.log(error.value);\n      console.log(error.property);\n    }\n```\n\nor use it for validation: \n\n\n```js\n\n  var MyClass = Class.define({\n    properties : {\n      foo : \"Boolean\"\n      bar : \"Number\"      \n    }\n  });\n\n  var data = {\n    foo : true,\n    bar : \"Some String\"\n  };\n  \n  var obj = new MyClass();\n  var errors = [];\n\n  var validate = function(property, value) {\n    errors = [];\n    for (var property in data) {\n      try {\n        obj.set(property, data[value]);  \n      } catch (exc) {\n        errors.push(exc);\n      }\n    }\n    return errors.length === 0;\n  }\n\n  for (var property in data) {\n    validate(property, data[property])\n  }\n\n  if (validate(data)) {\n    console.log(\"Validation OK. Submit form\");\n  } else {\n    console.log(\"Errors\", errors);\n  }\n```\n\n## Version History\n\n * 0.8.0 (2013/11/23, published to npm)\n  * Named Classes\n  * Namespace can now have a different context\n * 0.7.1 (2012/12/19, published to npm)\n  * Fixed constructor after inheritance\n * 0.7.0 (2012/8/26, published to npm)\n  * Enhanced ```__super__``` functionality\n  * node.js example\n  * Bugfixes\n * 0.6.2 (2012/8/5, published to npm)\n  * Added \"Date\" type to properties\n  * Refactoring\n * 0.6.1 (2012/7/29, published to npm)\n  * Improved ECMA5 property support\n  * Do not set the same value for a property twice\n  * Removed Class.error handling from property system\n  * Bugfixes\n * 0.6 (2012/7/28, published to npm)\n  * Splitted up files\n  * Use grunt to build project\n  * Interfaces can now have parameter checks\n * 0.5.2 (2012/7/27, published to npm)\n  * Added node tests\n * 0.5.1 (2012/7/27, published to npm)\n  * Node.js fixes\n * 0.5 (2012/7/27, published to npm)\n  * Added ECMA5 getter/setter\n  * API stabilization / changes\n  * Removed \"notfire\" event parameter from property setter\n * 0.4 (2012/7/27, not published to npm)\n  * Improved plugin system\n  * Added strict mode\n  * API stabilization / changes\n    * Removed instanceOf method\n    * Class.definition is now an array to ensure order of execution\n  * Before / After Class definition hooks\n  * Before / After instantiation hooks\n  * Bugfixes\n  * More tests\n * 0.3 (2012/7/27, not published to npm)\n  * Plugin system\n  * QUnit tests\n  * Namespaces\n  * Bugfixes\n  * Validation can be an array of validators\n  * Simple properties (prop:type) now possible\n  * Valiator & Formater can now be a member function\n  * More documentation\n * 0.2 (2012/7/26)\n  * Bugfixes\n  * API stabilization\n  * Documentation\n * 0.1.1 (2012/7/26)\n  * Minor Bugfixes\n  * Docu\n * 0.1 (2012/7/26)\n  * Inital release\n\n## Contribute\n\n * If you have a feature request or an issue please report it here: https://github.com/tjbutz/class.js/issues\n * If you have developed a plugin for class.js please let me know. I will list the plugin on this page.\n * If you use class.js in your project please let me know. I will list the project on this page.",
  "readmeFilename": "README.md",
  "_id": "classjs@0.8.0",
  "dist": {
    "shasum": "da2f038c6467a04ddfd27160ef3822411bdc2d8e",
    "tarball": "https://registry.npmjs.org/classjs/-/classjs-0.8.0.tgz"
  },
  "_from": "classjs@",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "tjbutz",
    "email": "tinobutz@gmail.com"
  },
  "maintainers": [
    {
      "name": "tjbutz",
      "email": "tinobutz@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "da2f038c6467a04ddfd27160ef3822411bdc2d8e",
  "_resolved": "https://registry.npmjs.org/classjs/-/classjs-0.8.0.tgz"
}
