module.exports = Class.extend(EventAbstract, {

    configId: -1,
    config: null,
    columns: [],

    params:
    {
        orderBy: 'id',
        order: 'DESC',
        filterBy: '',
        limit: 15,
        offset: 0
    },

    $container: null,
    table: null,
    $statusBar: null,

    constructor: function(configId)
    {
        var me = this;

        me.configId   = configId;
        me.$container = $('.configuration--container');
    },
    /**
     * Starts everything up.
     */
    load: function()
    {
        var me = this;

        EntityManager.query('config', [ me.configId ]).with('columns').submit(function(response) {
            me.config  = response.config;
            me.columns = response.columns;

            me.$container.empty();
            me.$container.append(me.createHeader());
            me.$container.append(me.createActionBar());

            me.createTable();
            me.loadData();
        });
    },
    createHeader: function()
    {
        var me         = this,
            $container = $('<div />', {
                'class': 'config--header--container'
            }),
            $header    = $('<div />', {
                'class': 'header--label',
                'html': me.config.label
            }),
            $button    = $('<button />', {
                'class': 'header--button',
                'html': 'Create'
            });

        $button.on('click', function() {
            me.$container.empty();

            (new (require('local/configuration/form_loader'))(me.$container, me.config)).load();
        });

        $container.html([$header, $button]);

        return $container;
    },
    createActionBar: function()
    {
        var me = this,
            $container = $('<div />', {
                'class': 'config--action-bar--container'
            }),
            $input     = $('<input />', {
                'class': 'search--input',
                'name': 'search_everything',
                'placeholder': 'Search everything...'
            }),
            $statusBar = $('<div />', {
                'class': 'status--bar',
                'html': 'Total 0 records'
            });

        var timeout = null;
        $input.on('change input', function() {
            if(timeout)
            {
                clearTimeout(timeout);
            }

            timeout = setTimeout(function() {
                me.params.filterBy = $input.val();
                me.loadData();
            }, 125);
        });

        $container.html([$input, $statusBar]);
        me.$statusBar = $statusBar;

        return $container;
    },
    /**
     * Load configurations data and insert it into the table.
     */
    loadData: function()
    {
        var me    = this,
            query = EntityManager.query('table_load', [ me.configId ]).params({
                orderBy: me.params.orderBy,
                order: me.params.order,
                filterBy: me.params.filterBy,
                limit: me.params.limit,
                offset: me.params.offset
            });

        query.submit(function(response) {
            me.$statusBar.html('Total ' + response.count + ' records');
            me.table.clearRows();
            response.data.forEach(me.processRow.bind(me));
        });
    },
    /**
     * Adds a new row to the table and gives it some functionality.
     */
    processRow: function(row)
    {
        var me      = this,
            $edit   = $('<i />', { 'class': 'fa fa-edit' }),
            $remove = $('<i />', { 'class': 'fa fa-remove' });

        $edit.on('click', function() {
            // edit action
        });

        $remove.on('click', function() {
            if(confirm('Are you sure to delete this row? You can not undo!'))
            {
                EntityManager.query('delete', [ me.configId, row.id ]).submit(function(response) {
                    if(response.success)
                    {
                        me.loadData();
                    }
                });
            }
        });

        row.actions = [$edit, $remove];
        me.table.addRow(row);
    },
    /**
     * Creates the basic dom table and adds it to $container
     */
    createTable: function()
    {
        var me = this;

        me.table = new (require('local/table'));
        me.table.insert(me.$container);

        me.columns.forEach(function(column) {
            me.table.addColumn(column.name, column.label);
        });

        me.table.addColumn('actions', 'Actions');
    }
});