module.exports = require('class-js2').create({

    configId: -1,

    params:
    {
        orderBy: 'id',
        order: 'DESC',
        filterBy: '',
        limit: 15,
        offset: 0
    },

    $container: null,
    table: null,

    url:
    {
        listing: '',
        listingColumns: ''
    },

    constructor: function(configId)
    {
        var me = this;

        me.configId   = configId;
        me.$container = $('.configuration--container');

        me.url.listing        = me.$container.attr('data-listingUrl');
        me.url.listingColumns = me.$container.attr('data-listingColumnsUrl');
    },
    /**
     * Starts everything up.
     */
    load: function()
    {
        var me = this;

        me.$container.empty();
        me.$container.append(me.createHeader());
        me.$container.append(me.createActionBar());

        me.createTable(me.loadData.bind(me));
    },
    createHeader: function()
    {
        var me         = this,
            $container = $('<div />', {
                'class': 'config--header--container'
            }),
            $header    = $('<div />', {
                'class': 'header--label',
                'html': 'Header Label'
            }),
            $button    = $('<button />', {
                'class': 'header--button',
                'html': 'Create'
            });

        $button.on('click', function() {
            // create action
        });

        $container.html([$header, $button]);

        return $container;
    },
    createActionBar: function()
    {
        var me = this,
            $container = $('<div />', {
                'class': 'config--action-bar--container'
            }),
            $input     = $('<input />', {
                'class': 'search--input',
                'name': 'search_everything',
                'placeholder': 'Search everything...'
            }),
            $statusBar = $('<div />', {
                'class': 'status--bar',
                'html': 'Total x records'
            });

        $input.on('change', function() {
            // search everything action
        });

        $container.html([$input, $statusBar]);

        return $container;
    },
    /**
     * Load configurations data and insert it into the table.
     */
    loadData: function()
    {
        var me = this;

        $.get(me.url.listing, {
            id: me.configId,
            orderBy: me.params.orderBy,
            order: me.params.order,
            filterBy: me.params.filterBy,
            limit: me.params.limit,
            offset: me.params.offset
        }, function(response) {
            response.data.forEach(me.processRow.bind(me));
        });
    },
    /**
     * Adds a new row to the table and gives it some functionality.
     */
    processRow: function(row)
    {
        var me      = this,
            $edit   = $('<i />', { 'class': 'fa fa-edit' }),
            $remove = $('<i />', { 'class': 'fa fa-remove' });

        $edit.on('click', function() {
            // edit action
        });

        $remove.on('click', function() {
            // remove action
        });

        row.actions = [$edit, $remove];
        me.table.addRow(row);
    },
    /**
     * Creates the basic dom table and adds it to $container
     */
    createTable: function(done)
    {
        var me = this;

        me.table = new (require('local/table'));
        me.table.insert(me.$container);

        me.loadColumns(function(columns) {
            columns.forEach(function(column) {
                me.table.addColumn(column.name, column.label);
            });

            me.table.addColumn('actions', 'Actions');

            done();
        });
    },
    /**
     * Load column data from remote server.
     */
    loadColumns: function(done)
    {
        var me = this;

        $.get(me.url.listingColumns, {id: me.configId}, function(response) {
            if(response.success)
            {
                done.apply(me, [response.data]);
            }
        });
    }
});