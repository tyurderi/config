<?php

namespace TM\Config\Components\Generator;

use TM\Config\Config;
use TM\Config\Field\Field;
use TM\Config\Components\ComponentAbstract;
use WCKZ\Generator\FileBuilder;

class ModelGenerator extends ComponentAbstract
{

    const MODEL_PROXY_DIR       = '/src/Model/Proxy/';

    const MODEL_PROXY_NAMESPACE = 'TM\Config\Model\Proxy';

    const MODEL_PROXY_EXTENDS   = '\TM\Config\Model\ModelAbstract';

    /**
     * @var string
     */
    protected $modelDirectory;

    public function initialize()
    {
        $this->modelDirectory = $this->app->getAppDir() . self::MODEL_PROXY_DIR;
    }

    /**
     * @param Config $config
     * @return boolean
     */
    public function generate(Config $config)
    {
        $className = camelize($config->getName());
        $fields    = $config->getFields();
        $class     = new FileBuilder();

        $class->add('<?php')->newLine(2);
        $class->add('/* Do not edit this file. Your changes could be lost. */')->newLine(2);
        $class->add('namespace %s;', self::MODEL_PROXY_NAMESPACE)->newLine(2);
        $class->add('class %s extends %s', $className, self::MODEL_PROXY_EXTENDS)->newLine();
        $class->add('{')->newLine(2);

        foreach($fields as $field)
        {
            $class->indent(1)->add('/**')->newLine();
            $class->indent(1)->add(' * @var %s', $field->getType()->getValueType())->newLine();
            $class->indent(1)->add(' */')->newLine();
            $class->indent(1)->add('protected $%s;', $field->getName())->newLine(2);
        }

        foreach($fields as $field)
        {
            $fieldName = camelize($field->getName());

            $class->indent(1)->add('public function get%s()', $fieldName)->newLine();
            $class->indent(1)->add('{')->newLine();
            $class->indent(2)->add('return $this->%s;', $field->getName())->newLine();
            $class->indent(1)->add('}')->newLine(2);

            $class->indent(1)->add('public function set%s($%s)', $fieldName, $field->getName())->newLine();
            $class->indent(1)->add('{')->newLine();
            $class->indent(2)->add('$this->%s = $%s;', $field->getName(), $field->getName())->newLine(2);
            $class->indent(2)->add('return $this;')->newLine();
            $class->indent(1)->add('}')->newLine(2);
        }

        $class->indent(1)->add('/**')->newLine();
        $class->indent(1)->add(' * @param int $primaryKey')->newLine();
        $class->indent(1)->add(' * @return %s', $className)->newLine();
        $class->indent(1)->add(' */')->newLine();
        $class->indent(1)->add('public static function find($primaryKey = null)')->newLine();
        $class->indent(1)->add('{')->newLine();
        $class->indent(2)->add('return parent::find($primaryKey);')->newLine();
        $class->indent(1)->add('}')->newLine(2);

        $class->indent(1)->add('/**')->newLine();
        $class->indent(1)->add(' * @return %s[]', $className)->newLine();
        $class->indent(1)->add(' */')->newLine();
        $class->indent(1)->add('public static function findAll()')->newLine();
        $class->indent(1)->add('{')->newLine();
        $class->indent(2)->add('return parent::findAll();')->newLine();
        $class->indent(1)->add('}')->newLine(2);

        $class->indent(1)->add('/**')->newLine();
        $class->indent(1)->add(' * @param array $criteria')->newLine();
        $class->indent(1)->add(' * @return %s[]', $className)->newLine();
        $class->indent(1)->add(' */')->newLine();
        $class->indent(1)->add('public static function findBy(array $criteria)')->newLine();
        $class->indent(1)->add('{')->newLine();
        $class->indent(2)->add('return parent::findBy($criteria);')->newLine();
        $class->indent(1)->add('}')->newLine(2);

        $class->indent(1)->add('protected static function getSource()')->newLine();
        $class->indent(1)->add('{')->newLine();
        $class->indent(2)->add('return \'%s\';', $config->getName())->newLine();
        $class->indent(1)->add('}')->newLine(2);

        $class->indent(1)->add('protected static function getClassName()')->newLine();
        $class->indent(1)->add('{')->newLine();
        $class->indent(2)->add('return \'%s\\%s\';', self::MODEL_PROXY_NAMESPACE, $className)->newLine();
        $class->indent(1)->add('}')->newLine(2);

        $class->add('}')->newLine();

        $filename = $this->getFilename($className);
        $content  = (string) $class;

        return file_put_contents($filename, $content);
    }

    protected function getFilename($className)
    {
        return $this->modelDirectory . $className . '.php';
    }

}